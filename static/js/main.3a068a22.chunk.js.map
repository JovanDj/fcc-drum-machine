{"version":3,"sources":["components/Pad.jsx","App.js","serviceWorker.js","index.js"],"names":["Pad","handleKeydown","e","keyCode","props","pad","letter","charCodeAt","audioRef","play","onHandleDisplay","id","document","addEventListener","this","removeEventListener","className","type","onClick","onHandleClick","ref","src","Component","App","pads","state","display","handleDisplay","setState","handleClick","StrictMode","map","key","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PA2CeA,G,iNAhCbC,cAAgB,SAAAC,GACVA,EAAEC,UAAY,EAAKC,MAAMC,IAAIC,OAAOC,eACtC,EAAKC,SAASC,OACd,EAAKL,MAAMM,gBAAgB,EAAKN,MAAMC,IAAIM,M,mFAV5CC,SAASC,iBAAiB,UAAWC,KAAKb,iB,6CAI1CW,SAASG,oBAAoB,UAAWD,KAAKb,iB,+BAUrC,IAAD,OACP,OACE,4BACEK,OAAQQ,KAAKV,MAAMC,IAAIC,OACvBU,UAAU,0CACVL,GAAIG,KAAKV,MAAMC,IAAIM,GACnBM,KAAK,SACLC,QAAS,kBACP,EAAKd,MAAMe,cAAc,EAAKX,SAAU,EAAKJ,MAAMC,IAAIM,MAGxDG,KAAKV,MAAMC,IAAIC,OAChB,2BACEc,IAAK,SAAAA,GAAG,OAAK,EAAKZ,SAAWY,GAC7BJ,UAAU,OACVL,GAAIG,KAAKV,MAAMC,IAAIC,OACnBe,IAAKP,KAAKV,MAAMC,IAAIgB,KAJtB,4B,GA5BUC,cCuFHC,E,2MArFbC,KAAO,CACL,CACEb,GAAI,QACJL,OAAQ,IACRe,IAAK,qDAEP,CACEV,GAAI,SACJL,OAAQ,IACRe,IAAK,yDAEP,CACEV,GAAI,QACJL,OAAQ,IACRe,IAAK,mDAEP,CACEV,GAAI,UACJL,OAAQ,IACRe,IAAK,0DAEP,CACEV,GAAI,SACJL,OAAQ,IACRe,IAAK,iDAEP,CACEV,GAAI,UACJL,OAAQ,IACRe,IAAK,2DAEP,CACEV,GAAI,WACJL,OAAQ,IACRe,IAAK,iDAEP,CACEV,GAAI,WACJL,OAAQ,IACRe,IAAK,yDAEP,CACEV,GAAI,QACJL,OAAQ,IACRe,IAAK,iE,EAITI,MAAQ,CACNC,QAAS,eACTF,KAAM,EAAKA,M,EAGbG,cAAgB,SAAAD,GACd,EAAKE,SAAS,CAAEF,a,EAGlBG,YAAc,SAACT,EAAKf,GAClB,EAAKsB,cAActB,GACnBe,EAAIX,Q,wEAGI,IAAD,OACP,OACE,kBAAC,IAAMqB,WAAP,KACE,yBAAKd,UAAU,YAAYL,GAAG,gBAC5B,wBAAIA,GAAG,WAAWG,KAAKW,MAAMC,SAC7B,yBAAKV,UAAU,4CACZF,KAAKW,MAAMD,KAAKO,KAAI,SAAA1B,GACnB,OACE,kBAAC,EAAD,CACEK,gBAAiB,EAAKiB,cACtBK,IAAK3B,EAAIM,GACTN,IAAKA,EACLc,cAAe,EAAKU,wB,GA3EpBP,aCSEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAS3B,SAAS4B,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3a068a22.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Pad extends Component {\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeydown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeydown);\n  }\n\n  handleKeydown = e => {\n    if (e.keyCode === this.props.pad.letter.charCodeAt()) {\n      this.audioRef.play();\n      this.props.onHandleDisplay(this.props.pad.id);\n    }\n  };\n\n  render() {\n    return (\n      <button\n        letter={this.props.pad.letter}\n        className=\"drum-pad btn-outline-primary btn-lg p-4\"\n        id={this.props.pad.id}\n        type=\"button\"\n        onClick={() =>\n          this.props.onHandleClick(this.audioRef, this.props.pad.id)\n        }\n      >\n        {this.props.pad.letter}\n        <audio\n          ref={ref => (this.audioRef = ref)}\n          className=\"clip\"\n          id={this.props.pad.letter}\n          src={this.props.pad.src}\n        >\n          Audio not available\n        </audio>\n      </button>\n    );\n  }\n}\n\nexport default Pad;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Pad from \"./components/Pad\";\nclass App extends Component {\n  pads = [\n    {\n      id: \"snare\",\n      letter: \"Q\",\n      src: \"https://www.myinstants.com/media/sounds/snare.mp3\"\n    },\n    {\n      id: \"bass 1\",\n      letter: \"W\",\n      src: \"https://www.myinstants.com/media/sounds/bass-drum.mp3\"\n    },\n    {\n      id: \"bongo\",\n      letter: \"E\",\n      src: \"http://tipiwiki.free.fr/snd/Percussion(4e)2.wav\"\n    },\n    {\n      id: \"tom tom\",\n      letter: \"A\",\n      src: \"http://www.denhaku.com/r_box/sr16/sr16tom/loelectm.wav\"\n    },\n    {\n      id: \"bass 3\",\n      letter: \"S\",\n      src: \"http://billor.chsh.chc.edu.tw/sound/bass4.wav\"\n    },\n    {\n      id: \"shotgun\",\n      letter: \"D\",\n      src: \"http://david.guerrero.free.fr/Effects/ShotgunReload.wav\"\n    },\n    {\n      id: \"high hat\",\n      letter: \"Z\",\n      src: \"http://www.denhaku.com/r_box/tr707/closed.wav\"\n    },\n    {\n      id: \"drum hit\",\n      letter: \"X\",\n      src: \"http://www.masterbits.de/sc_docu/sounds1/1TM00013.MP3\"\n    },\n    {\n      id: \"laser\",\n      letter: \"C\",\n      src: \"http://www.sa-matra.net/sounds/starcontrol/Umgah-Backzip.wav\"\n    }\n  ];\n\n  state = {\n    display: \"Drum machine\",\n    pads: this.pads\n  };\n\n  handleDisplay = display => {\n    this.setState({ display });\n  };\n\n  handleClick = (ref, pad) => {\n    this.handleDisplay(pad);\n    ref.play();\n  };\n\n  render() {\n    return (\n      <React.StrictMode>\n        <div className=\"container\" id=\"drum-machine\">\n          <h1 id=\"display\">{this.state.display}</h1>\n          <div className=\"d-flex justify-content-between bg-light \">\n            {this.state.pads.map(pad => {\n              return (\n                <Pad\n                  onHandleDisplay={this.handleDisplay}\n                  key={pad.id}\n                  pad={pad}\n                  onHandleClick={this.handleClick}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </React.StrictMode>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}